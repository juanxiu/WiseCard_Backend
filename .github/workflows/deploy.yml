name: Build and Deploy WiseCard Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        # 테스트용 H2 데이터베이스 사용 (application.yml의 기본 설정)
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # EC2 서버에서 실행할 배포 스크립트
          cd /home/ubuntu/WiseCard_Backnend
          
          # 최신 코드 가져오기
          git fetch origin
          git reset --hard origin/main
          
          # 환경변수 파일 업데이트
          cat > .env << EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME= db-wisecard
          DB_USERNAME= admin
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=3306
          REDIS_HOST=redis-wisecard
          REDIS_PORT=6379
          REDIS_PASSWORD=
          APP_API_KAKAO_KEY=${{ secrets.APP_API_KAKAO_KEY }}
          APP_PORT=8080
          GRPC_PORT=9091
          EOF
          
          # Docker 이미지 빌드 및 시작
          docker-compose down
          docker-compose build --no-cache
          docker-compose up -d
          
          # 헬스체크 (최대 5분 대기)
          echo "헬스체크 시작..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "애플리케이션이 정상적으로 시작되었습니다."
              break
            fi
            echo "헬스체크 시도 $i/30 - 대기 중..."
            sleep 10
          done
          
          # 최종 헬스체크
          if ! curl -f http://localhost:8080/actuator/health; then
            echo "배포 실패 - 롤백을 시도합니다."
            docker-compose down
            docker-compose up -d
            exit 1
          fi
          
          # 불필요한 이미지 정리
          docker image prune -f
          
          echo "배포가 성공적으로 완료되었습니다!"
